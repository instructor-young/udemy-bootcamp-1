// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id
  email             String        @unique
  encryptedPassword String
  profile           UserProfile?
  createdAt         DateTime      @default(now())
  reservations      Reservation[]
  reviews           Review[]
}

model UserProfile {
  userId      String   @id
  user        User     @relation(fields: [userId], references: [id])
  nickname    String
  phoneNumber String?
  updatedAt   DateTime @updatedAt
}

model Partner {
  id                String          @id
  email             String          @unique
  encryptedPassword String
  businessName      String
  phoneNumber       String
  staffName         String
  accommodations    Accommodation[]
  createdAt         DateTime        @default(now())
}

model Accommodation {
  id          Int               @id @default(autoincrement())
  partner     Partner           @relation(fields: [partnerId], references: [id])
  partnerId   String
  regions     Region[]
  type        AccommodationType
  name        String
  description String            @default("")
  rooms       Room[]
  address1    String
  address2    String
  latitude    Float
  longitude   Float
  imgUrl      String            @default("")
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

enum AccommodationType {
  hotel
  motel
  resort
  pension
  guestHouse
  poolVilla
  camping
  glamping
}

model Region {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  label          String
  accommodations Accommodation[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Room {
  id              Int           @id @default(autoincrement())
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])
  accommodationId Int
  name            String
  description     String        @default("")
  originalPrice   Int
  price           Int
  checkInTime     String
  checkOutTime    String
  reservations    Reservation[]
  reviews         Review[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Reservation {
  id           String    @id
  room         Room      @relation(fields: [roomId], references: [id])
  roomId       Int
  date         DateTime
  reservedBy   User?     @relation(fields: [reservedById], references: [id])
  reservedById String?
  reservedAt   DateTime?
  checkedInAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([roomId, date])
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    Int
  rating    Int
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
